@{
    ViewData["Title"] = "Diagnostic Analysis";
    Layout = "~/Views/Shared/_LayoutLoggedin.cshtml";
}

<style>
    * {
        margin: 0;
        padding: 0;
        font-family: sans-serif;
    }

    .chartMenu {
        width: auto;
        height: auto;
        padding: 20px;
        background: #69cc00;
        text-align: center;
        color: white;
    }

        .chartMenu p {
            padding: 10px;
            font-size: 30px;
        }

    .chartCard {
        width: auto;
        height: auto;
        padding: 10px;
        background: #e6ffcc;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom:30px;
    }

    .chartBox {
        width: 600px;
        padding: 20px;
        border-radius: 20px;
        border: solid 3px #4f9900;
        background: white;
    }

    .chartBox2 {
        width: auto;
        padding: 20px;
        border-radius: 20px;
        border: solid 3px #4f9900;
        background: white;
    }

    .chartjs-table, th, td {
        border-collapse: collapse;
        border: 1px solid green;
        padding: 10px;     
    }

    .chartjs-thead {
        font-weight: bold;
    }

    .chartjs-tbody {
        text-align: center;       
    }

    .chartBox3 {
        width: auto;
        padding: 20px;
        border-radius: 20px;
        border: solid 3px #4f9900;
        background: white;
    }

    .grid-container {
        display: grid;
        grid-template-columns: auto auto;
        padding: 10px;
    }

    .grid-item {
        padding: 20px;
        font-size: 30px;
    }

    .item1 {
        grid-area: header;
    }

    .item2 {
        grid-area: menu;
    }

    .item3 {
        grid-area: main;
    }

    .item4 {
        grid-area: right;
    }

    .item5 {
        grid-area: footer;
    }

    .grid-container2 {
        display: grid;
        grid-template-areas:
            'menu main main main main main  main '
            'menu footer footer footer footer footer footer';
        gap: 5px;
        padding: 5px;
    }

        .grid-container2 > div {
            text-align: center;
            padding: 5px;
            font-size: 16px;
        }

</style>

<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-datalabels/2.1.0/chartjs-plugin-datalabels.min.js" integrity="sha512-Tfw6etYMUhL4RTki37niav99C6OHwMDB2iBT5S5piyHO+ltK2YX8Hjy9TXxhE1Gm/TmAV0uaykSpnHKFIAif/A==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script type="text/javascript" src="https://unpkg.com/chart.js-plugin-labels-dv/dist/chartjs-plugin-labels.min.js"></script>

<div class="back-button" style="margin-bottom:20px">
    <a class="notificationback-link btn btn-outline-success p-2 mt-5" href="ReportsPage" type="button">Back</a>
    <a class="notificationback-link btn btn-outline-success p-2 mt-5" onClick="window.print()" style="width:20%">Print/Save File</a>
</div>

<div class="chartMenu">
    <p>SUMMARY OF NET PROFIT: DIAGNOSTIC ANALYSIS</p>
</div>
<div class="grid-container">
    <div class="grid-item">
        <div>
            <div>
                <table style="font-size:15px;">
                    <tr>
                        <th colspan="2" style="text-align:center">Key Objectives</th>
                    </tr>
                    <tr>
                        <td><img src="~/img/health.png" height="50px"/></td>
                        <td>Perform Health Checks of the Profit Generated by Sales Employee</td>
                    </tr>
                    <tr>
                        <td><img src="~/img/assess.png" height="50px"/></td>
                        <td>Assess the sales performance of employees</td>
                    </tr>
                    <tr>
                        <td><img src="~/img/homepicbgr.png" height="50px" /></td>
                        <td>Realize the strengths of the organization and focus on weakness</td>
                    </tr>
                </table>
            </div>
        </div>
    </div>
    <div class="grid-item">
        <div>
            <div>
                <table style="font-size:15px">
                    <tr>
                        <th colspan="2" style="text-align:center">Key Areas to Improve</th>
                    </tr>
                    <tr>
                        <td><img height="50px" src="https://www.kindpng.com/picc/m/74-743103_listening-to-customers-png-happy-customer-png-transparent.png" alt="Listening To Customers Png - Happy Customer Png," /></td>
                        <td>Increase the number of customers.</td>
                    </tr>
                    <tr>
                        <td><img height="50px" src="https://www.kindpng.com/picc/m/592-5921325_icone-exprience-client-png-download-gif-image-of.png" alt="Icone Expérience Client , Png Download - Gif Image Of Transaction," /></td>
                        <td>Increase the average transaction size by offering other products to clients.</td>
                    </tr>
                    <tr>
                        <td><img height="50px" src="https://www.kindpng.com/picc/m/723-7236770_follow-up-and-processing-follow-up-icon-hd.png" alt="Follow-up And Processing - Follow Up Icon, HD Png Download@kindpng.com"></td>
                        <td>Increase the frequency of transactions per client by having follow ups</td>
                    </tr>
                    <tr>
                        <td><img height="50px" src="https://www.kindpng.com/picc/m/82-825162_supplier-icon-png-transparent-png.png" alt="Supplier Icon Png, Transparent Png@kindpng.com"></td>
                        <td>Look for low-cost suppliers</td>
                    </tr>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- INPUT DB SHEET LINK-->
<div class="container" style="padding:40px">
    <div class="card">
        <div class="card-header"><b>Input SHEETDB API URL (CSV FILE)</b></div>
        <div style="padding:10px">Create new Google Spreadsheet using this template: <a class="card-link" href="https://docs.google.com/spreadsheets/d/1ZlOB7gOCAyhbZ_iQq9cQHDPJIxDbpoknAbjkU5tQdDk/edit#gid=0" target="_blank">Diagnostic Template</a></div>
        <div style="padding:10px">Logged in to Convert Google Spreadsheet link to SheetDB API (CSV): <a class="card-link" href="https://sheetdb.io/apis" target="_blank">SheetDB API</a></div>
        <div class="card-body" style="margin: 0 auto;margin-left: auto;margin-right: auto;">
            <input type="text" placeholder="Paste SheetDB API Url Here..." id="myInput" size="50">
            <button class="btn btn-outline-success" onclick="plotcharts()">Plot Charts</button>
        </div>
    </div>
</div>

<div class="chartCard">
    <div class="grid-container2">
        <div class="item2">
            <div class="chartBox">
                <div>Pie Chart: NET PROFIT GENERATED</div>
                <canvas id="piechart"></canvas>
            </div>
        </div>
        <div class="item3">
            <div class="chartBox">
                <div>Polar Chart: GROSS SALES</div>
                <canvas id="polarAreachart2"></canvas>
            </div>
        </div>
    </div>
</div>

<!-- OLD CODE-->

<script type="text/javascript">
    function plotcharts() {
        var inputVal = document.getElementById("myInput").value;
        var apiUrl = inputVal;
        var date = []
        var net = [];
        var gross = [];

        var bgcolor = [
            'rgba(255, 26, 104, 0.2)',
            'rgba(54, 162, 235, 0.2)',
            'rgba(255, 206, 86, 0.2)',
            'rgba(75, 192, 192, 0.2)',
            'rgba(153, 102, 255, 0.2)',
            'rgba(255, 159, 64, 0.2)',
            'rgba(0, 0, 0, 0.2)'
        ];

        var bordercolor = [
            'rgba(255, 26, 104, 1)',
            'rgba(54, 162, 235, 1)',
            'rgba(255, 206, 86, 1)',
            'rgba(75, 192, 192, 1)',
            'rgba(153, 102, 255, 1)',
            'rgba(255, 159, 64, 1)',
            'rgba(0, 0, 0, 1)'
        ];


        fetch(apiUrl).then(response => {
            return response.json();
        }).then(data => {
            for (let i = 0; i < data.length; i++) {
                date.push(data[i]['Date']);
                net.push(parseInt(data[i]['Net Profit']));
                gross.push(parseInt(data[i]['Gross Sales']));
            }
           

            ////For Line chart
            //dataset = addData('Selling Price', selling, 'transparent', 'green');
            //drawchart(dataset, months, 'line');

            //For Pie Chart
            dataset = addData('Net  Profit', net, bgcolor, bordercolor);
            drawchart(dataset, date, 'pie')

            //For polarArea chart
            dataset = addData('Gross Sales', gross, bgcolor, bordercolor);
            drawchart2(dataset, date, 'polarArea');

        }).catch(err => {
            console.log(err);
        });
    }

    function addData(title, Data, bgcolor, bordercolor) {
        return [{
            label: title,
            data: Data,
            backgroundColor: bgcolor,
            borderColor: bordercolor,
            borderWidth: 1,
            hoverOffset: 50
        }];
    }

    function drawchart(dataset, Labels, type) {
        const ctx = document.getElementById(type + 'chart').getContext('2d');
        const myChart = new Chart(ctx, {
            type: type,
            data: {
                labels: Labels,
                datasets: dataset
            },
            options: {
                layout: {
                    padding: {
                        bottom: 15,
                        top: 50
                    }
                },
                plugins: {
                    datalabels: {
                        align: 'center',
                        formatter: (value, context) => {
                            //console.log(value);
                            //console.log(context.chart.data.datasets[0].data);
                            const datapoints = context.chart.data.datasets[0].data;
                            function totalSum(total, datapoint) {
                                return total + datapoint;
                            }
                            const totalValue = datapoints.reduce(totalSum, 0);
                            const percentageValue = (value / totalValue * 100).toFixed(1);

                            const display = [`${percentageValue}%`]
                            return display;
                        }
                    }
                }
            },
            plugins: [ChartDataLabels]
        });
    }
    function drawchart2(dataset, Labels, type) {
        const ctx = document.getElementById(type + 'chart2').getContext('2d');
        const myChart = new Chart(ctx, {
            type: type,
            data: {
                labels: Labels,
                datasets: dataset
            },
            options: {
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                }
            }
        });
    }

    //Table Net Profit CHART ---------------------------------------------------------------------------------------------------------------------------------
    const profit = {
        labels: ['Net Profit'],
        datasets: [{
            label: 'Net Profit Current Month',
            data: ['The generated over all sales is Php:' + 1211],
            backgroundColor: [
                'orange', // legend color
            ],
            borderColor: [
                'orange', // line color
            ],
            borderWidth: 1
        },
        {
            label: 'Net Profit Last Month',
            data: ['The generated over all sales is Php:' + 121070],
            backgroundColor: [
                'gray', // legend color
            ],
            borderColor: [
                'gray', // line color
            ],
            borderWidth: 1
        },
        {
            label: 'Net Profit Current Year',
            data: ['The generated over all sales is Php:' + 18120],
            backgroundColor: [
                'rgb(0, 38, 153)', // legend color
            ],
            borderColor: [
                'rgb(0, 38, 153)', // line color
            ],
            borderWidth: 1
        },
        {
            label: 'Net Profit Last Year',
            data: ['The generated over all sales is Php:' + 18120],
            backgroundColor: [
                'rgb(0, 38, 153)', // legend color
            ],
            borderColor: [
                'rgb(0, 38, 153)', // line color
            ],
            borderWidth: 1
        }]
    };


    // config
    const config2 = {
        type: 'line',
        data: profit,
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    };
    const lineChart = new Chart(
        document.getElementById('lineChart'),
        config2
    );

    //UNITS SOLD
    const units = {
        labels: ['Current Month', 'Past Month'],
        datasets: [{
            label: 'Unit Sold:',
            data: [1211 + 'Units', 900 + 'Units'],
            backgroundColor: [
                'orange', // legend color
            ],
            borderColor: [
                'orange', // line color
            ],
            borderWidth: 1
        },
        {
            label: 'CGOS ',
            data: ['Php :' + 121070, 'Php :' + 52142],
            backgroundColor: [
                'gray', // legend color
            ],
            borderColor: [
                'gray', // line color
            ],
            borderWidth: 1
        },
        {
            label: 'Overall Net Profit ',
            data: ['Php :' + 4000000000, 'Php :' + 390000000],
            backgroundColor: [
                'rgb(0, 38, 153)', // legend color
            ],
            borderColor: [
                'rgb(0, 38, 153)', // line color
            ],
            borderWidth: 1
        }]
    };



    function createTable() {
        console.log('triggered');
        const chartBox = document.querySelector('.chartBox2');
        const tableDiv = document.createElement('DIV');
        tableDiv.setAttribute('id', 'tableDiv');//assign ID

        //add Table
        const table = document.createElement('TABLE');
        table.classList.add('chartjs-table');

        //add thead
        const thead = table.createTHead();
        thead.classList.add('chartjs-thead');

        //add Column Headers using data
        thead.insertRow(0);
        console.log(units.labels)
        for (let i = 0; i < units.labels.length; i++) {
            thead.rows[0].insertCell(i).innerText = units.labels[i];
            thead.rows[0].cells[i].style.color = 'orange';
        };
        thead.rows[0].insertCell(0).innerText = 'Metrics';

        //tbody
        const tbody = table.createTBody();
        tbody.classList.add('chartjs-tbody');

        //data
        console.log(units.datasets)
        units.datasets.map((dataset, index) => {
            tbody.insertRow(index);
            for (let i = 0; i < units.datasets[0].data.length; i++) {
                tbody.rows[index].insertCell(i).innerText = dataset.data[i];
            };

            tbody.rows[index].insertCell(0).innerText = dataset.label;
        })
        //append
        chartBox.appendChild(tableDiv);
        tableDiv.appendChild(table);
    };

    createTable();

    function createTable2() {
        console.log('triggered');
        const chartBox = document.querySelector('.chartBox3');
        const tableDiv = document.createElement('DIV');
        tableDiv.setAttribute('id', 'tableDiv');//assign ID

        //add Table
        const table = document.createElement('TABLE');
        table.classList.add('chartjs-table');

        //add thead
        const thead = table.createTHead();
        thead.classList.add('chartjs-thead');

        //add Column Headers using data
        thead.insertRow(0);
        console.log(profit.labels)
        for (let i = 0; i < profit.labels.length; i++) {
            thead.rows[0].insertCell(i).innerText = profit.labels[i];
            thead.rows[0].cells[i].style.color = 'orange';
        };
        thead.rows[0].insertCell(0).innerText = 'Metrics';

        //tbody
        const tbody = table.createTBody();
        tbody.classList.add('chartjs-tbody');

        //data
        console.log(profit.datasets)
        profit.datasets.map((dataset, index) => {
            tbody.insertRow(index);
            for (let i = 0; i < profit.datasets[0].data.length; i++) {
                tbody.rows[index].insertCell(i).innerText = dataset.data[i];
            };

            tbody.rows[index].insertCell(0).innerText = dataset.label;
        })
        //append
        chartBox.appendChild(tableDiv);
        tableDiv.appendChild(table);
    };

    createTable2();
</script>

<script>
    function printFunction() {
        window.print();
    }
</script>