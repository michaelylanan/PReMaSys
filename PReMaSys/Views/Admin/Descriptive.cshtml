@using System.Globalization
@inject PReMaSys.Data.ApplicationDbContext _context;

@{
    ViewData["Title"] = "Descriptive Analysis";
    Layout = "~/Views/Shared/_LayoutLoggedin.cshtml";

    var getProfit = ViewBag.User as List<SalesPerformance>;

}

@{
    DateTime currentDate = DateTime.Now;

    DateTime currentMonth = currentDate;

    DateTime lastYear = currentDate.AddYears(-1);
    DateTime currentYear = currentDate;

    int currentYear2 = currentDate.Year;

    var monthlyData = getProfit
           .Where(s => s.DateAdded.Year == currentYear2)
           .GroupBy(s => new { Month = s.DateAdded.Month })
           .Select(g => new { Month = g.Key.Month, TotalUnitsSold = g.Sum(s => s.UnitsSold) })
           .OrderBy(d => d.Month)
           .ToList();



    // Calculate monthly data for SalesProfit
    var monthlyProfit = getProfit
        .Where(s => s.DateAdded.Year == currentYear2)
        .GroupBy(s => new { Month = s.DateAdded.Month })
        .Select(g => new { Month = g.Key.Month, TotalProfit = g.Sum(s => s.SalesProfit) })
        .OrderBy(d => d.Month)
        .ToList();

    // Calculate monthly data for SalesRevenue
    var monthlyRevenue = getProfit
        .Where(s => s.DateAdded.Year == currentYear2)
        .GroupBy(s => new { Month = s.DateAdded.Month })
        .Select(g => new { Month = g.Key.Month, TotalRevenue = g.Sum(s => s.SalesRevenue) })
        .OrderBy(d => d.Month)
        .ToList();

    // Calculate monthly data for UnitsSold
    var monthlyUnitsSold = getProfit
        .Where(s => s.DateAdded.Year == currentYear2)
        .GroupBy(s => new { Month = s.DateAdded.Month })
        .Select(g => new { Month = g.Key.Month, TotalUnitsSold = g.Sum(s => s.UnitsSold) })
        .OrderBy(d => d.Month)
        .ToList();
}

<style>
    * {
        margin: 0;
        padding: 0;
        font-family: sans-serif;
    }

    .chartMenu {
        width: auto;
        height: auto;
        padding:20px;
        background: #69cc00;
        text-align: center;
        color: white;
    }

        .chartMenu p {
            padding: 10px;
            font-size: 30px;
        }

    .chartCard {
        width: auto;
        height: auto;
        padding: 20px;
        background: #e6ffcc;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .chartBox {
        width: 1000px;
        padding: 20px;
        border-radius: 20px;
        border: solid 3px #4f9900;
        background: white;
    }

    .chartBox2 {
        width: 1000px;
        padding: 20px;
        border-radius: 20px;
        border: solid 3px #4f9900;
        background: white;
    }

    .chartjs-table, th, td {
        border-collapse: collapse;
        border: 1px solid green;
        padding: 10px;
    }

    .chartjs-thead {
        font-weight: bold;
    }

    .chartjs-tbody {
        text-align: center;
    }

</style>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<div class="back-button" style="margin-bottom:20px">
    <a class="notificationback-link btn btn-outline-success p-2 mt-5" href="ReportsPage" type="button">Back</a>
    <a class="notificationback-link btn btn-outline-success p-2 mt-5" onClick="window.print()" style="width:20%">Print/Save File</a>
</div>

<div class="chartMenu">
    <p>SUMMARY OF SALES: DESCRIPTIVE ANALYSIS</p>
</div>

<!-- Visual Charts-->
<div class="chartCard">
    <div class="chartBox">
        <div>Bar Graph: UNIT SOLD PER MONTH </div>
        <canvas id="unitsSoldChart"></canvas>
        <table class="table">
            <thead>
                <tr>
                    <th>Month</th>
                    <th>Total Units Sold</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in monthlyUnitsSold)
                {
                    <tr>
                        <td>@DateTimeFormatInfo.CurrentInfo.GetMonthName(item.Month)</td>
                        <td>@string.Format("{0:#,##0}", @item.TotalUnitsSold)</td>
                    </tr>
                }
            </tbody>
        </table>

    </div>
</div>

<div class="chartCard">
    <div class="chartBox">
        <div>Line Graph: GROSS, PROFIT, UNIT SOLD</div>
        <canvas id="netgrossChart"></canvas>
        <table class="table">
            <thead>
                <tr>
                    <th>Month</th>
                    <th>Total Profit</th>
                    <th>Total Revenue</th>
                    <th>Total Units Sold</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in monthlyData)
                {
                    <tr>
                        <td>@DateTimeFormatInfo.CurrentInfo.GetMonthName(item.Month)</td>
                        <td>&#8369; @string.Format("{0:#,##0}",@monthlyProfit.Sum(s => s.TotalProfit))</td>
                        <td>&#8369; @string.Format("{0:#,##0}",@monthlyRevenue.Sum(s=> s.TotalRevenue))</td>
                        <td>@string.Format("{0:#,##0}",@item.TotalUnitsSold)</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>



<div>
    <script>
        var monthlyDates = @Html.Raw(Json.Serialize(monthlyData.Select(d => new DateTime(currentYear2, d.Month, 1).ToString("MMMM"))));
        var monthlyUnitsSold = @Html.Raw(Json.Serialize(monthlyData.Select(d => d.TotalUnitsSold)));

        var salesUnitsData = {
            labels: monthlyDates,
            datasets: [{
                label: 'Units Sold',
                data: monthlyUnitsSold,
                backgroundColor: 'rgba(75, 192, 192, 0.8)'
            }]
        };

        var unitsSoldChartCanvas = document.getElementById('unitsSoldChart').getContext('2d');
        new Chart(unitsSoldChartCanvas, {
            type: 'bar',
            data: salesUnitsData,
            options: {
                indexAxis: 'x',
                scales: {
                    x: {
                        beginAtZero: true,
                        grid: {
                            display: false
                        }
                    },
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    </script>
</div>

<script>
    var monthlyDates = @Html.Raw(Json.Serialize(monthlyProfit.Select(d => new DateTime(currentYear2, d.Month, 1).ToString("MMMM"))));
    var monthlyProfitData = @Html.Raw(Json.Serialize(monthlyProfit.Select(d => d.TotalProfit)));
    var monthlyRevenueData = @Html.Raw(Json.Serialize(monthlyRevenue.Select(d => d.TotalRevenue)));
    var monthlyUnitsSoldData = @Html.Raw(Json.Serialize(monthlyUnitsSold.Select(d => d.TotalUnitsSold)));


    var netGrossData = {
        labels: monthlyDates,
        datasets: [
            {
                label: 'Sales Profit',
                data: monthlyProfitData,
                borderColor: 'rgba(255, 99, 132, 0.8)',
                backgroundColor: 'rgba(255, 99, 132, 0.4)',
                fill: false
            },
            {
                label: 'Sales Revenue',
                data: monthlyRevenueData,
                borderColor: 'rgba(54, 162, 235, 0.8)',
                backgroundColor: 'rgba(54, 162, 235, 0.4)',
                fill: false
            },
            {
                label: 'Units Sold',
                data: monthlyUnitsSoldData,
                borderColor: 'rgba(75, 192, 192, 0.8)',
                backgroundColor: 'rgba(75, 192, 192, 0.4)',
                fill: false
            }
        ]
    };

    var netGrossChartCanvas = document.getElementById('netgrossChart').getContext('2d');
    new Chart(netGrossChartCanvas, {
        type: 'line',
        data: netGrossData,
        options: {
            scales: {
                x: {
                    beginAtZero: true,
                    grid: {
                        display: false
                    }
                },
                y: {
                    beginAtZero: true
                }
            }
        }
    });
</script>

<script>
    function printFunction() {
        window.print();
    }
</script>