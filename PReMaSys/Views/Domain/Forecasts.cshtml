@{
    ViewData["Title"] = "Forecasts";
    Layout = "~/Views/Shared/_LayoutLoggedin.cshtml";
}

<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>

<!--Bootstrap-->
<script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>

<style>
    * {
        margin: 0;
        padding: 0;
        font-family: sans-serif;
    }

    .chartMenu {
        width: auto;
        height: auto;
        background: #69cc00;
        text-align: center;
        color: white;
    }

        .chartMenu p {
            padding: 10px;
            font-size: 80px;
        }

    .chartCard {
        width: auto;
        height: auto;
        padding: 20px;
        background: #e6ffcc;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .chartBox {
        width: 1000px;
        padding: 20px;
        border-radius: 20px;
        border: solid 3px #4f9900;
        background: white;
    }

    .chartBox2 {
        width: auto;
        padding: 20px;
        border-radius: 20px;
        border: solid 3px #4f9900;
        background: white;
    }

    .chartjs-table, th, td {
        border-collapse: collapse;
        border: 1px solid green;
        padding: 10px;
    }

    .chartjs-thead {
        font-weight: bold;
    }

    .chartjs-tbody {
        text-align: center;
    }

</style>
<div class="back-button" style="margin-bottom:20px">
    <a class="notificationback-link btn btn-outline-success p-2 mt-5" asp-action="ReportsPage" asp-controller="Domain" type="button">Back</a>
    <a class="notificationback-link btn btn-outline-success p-2 mt-5" onClick="window.print()" style="width:20%">Print/Save File</a>
</div>
<div class="chartMenu">
    <p>PROFIT FORECAST</p>
</div>
<div class="chartCard">
    <div class="chartBox">
        <div class="dropdown">
            <button class="btn btn-success dropdown-toggle" type="button" id="dropdownMenu2" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Choose Time Frame
            </button>
            <div class="dropdown-menu" aria-labelledby="dropdownMenu2">
                <button class="dropdown-item" onclick="timeFrame(this)" value="day">Daily</button>
                <button class="dropdown-item" onclick="timeFrame(this)" value="week">Weekly</button>
                <button class="dropdown-item" onclick="timeFrame(this)" value="month">Monthly</button>
                <button class="dropdown-item" onclick="timeFrame(this)" value="quarter">Quarterly</button>
                <button class="dropdown-item" onclick="timeFrame(this)" value="year">Yearly</button>
            </div>
        </div>
        <canvas id="myChart" style="margin-bottom:40px"></canvas>
        @*<div class="chartBox2">
            <div>Table: Data Interpretation</div>
        </div>*@
        <div class="container">
            <table class="table">
                <tr>
                    <th>Products Sold</th>
                    <th>July 2020</th>
                    <th>August 2020</th>
                    <th>September 2020</th>
                    <th>October 2020</th>
                    <th>November 2020</th>
                    <th>December 2020</th>
                </tr>
                <tr>
                    <td>Product 1</td>
                    <td>Php 100,000</td>
                    <td>Php 200,000</td>
                    <td>Php 300,000</td>
                    <td>Php 150,000</td>
                    <td>Php 280,000</td>
                    <td>Php 400,000</td>
                </tr>
                <tr>
                    <td>Product 2</td>
                    <td>Php 110,000</td>
                    <td>Php 280,000</td>
                    <td>Php 350,000</td>
                    <td>Php 250,000</td>
                    <td>Php 180,000</td>
                    <td>Php 300,000</td>
                </tr>
                <tr>
                    <td>Product 3</td>
                    <td>Php 90,000</td>
                    <td>Php 210,000</td>
                    <td>Php 290,000</td>
                    <td>Php 170,000</td>
                    <td>Php 180,000</td>
                    <td>Php 500,000</td>
                </tr>
                <tr>
                    <td>Product 4</td>
                    <td>Php 110,000</td>
                    <td>Php 280,000</td>
                    <td>Php 350,000</td>
                    <td>Php 250,000</td>
                    <td>Php 180,000</td>
                    <td>Php 300,000</td>
                </tr>
            </table>
    </div>
</div>


<script>
    //day
    //parse means to make something readable depending on the data type
    //this data should be fetch in excel data
    //But How? Can be it in a list form, array?
    const day = [
        { x: Date.parse('2022-11-01 00:00:00 GMT+0800'), y: 10000 }, //fixed Time format: HH:MM:SS (GMT: Greenwhich MeanTime)
        { x: Date.parse('2022-11-02 00:00:00 GMT+0800'), y: 2000 },
        { x: Date.parse('2022-11-03 00:00:00 GMT+0800'), y: 4000 },
        { x: Date.parse('2022-11-04 00:00:00 GMT+0800'), y: 6000 },
        { x: Date.parse('2022-11-05 00:00:00 GMT+0800'), y: 7000 },
        { x: Date.parse('2022-11-06 00:00:00 GMT+0800'), y: 10000 },
        { x: Date.parse('2022-11-07 00:00:00 GMT+0800'), y: 9000 },
    ];

    //Week
    const week = [
        { x: Date.parse('2022-10-30 00:00:00 GMT+0800'), y: 15000 }, //fixed Time format: HH:MM:SS (GMT: Greenwhich MeanTime)
        { x: Date.parse('2022-11-06 00:00:00 GMT+0800'), y: 9000 },
        { x: Date.parse('2022-11-13 00:00:00 GMT+0800'), y: 14000 },
        { x: Date.parse('2022-11-20 00:00:00 GMT+0800'), y: 16000 },
        { x: Date.parse('2022-11-27 00:00:00 GMT+0800'), y: 17000 },
        { x: Date.parse('2022-12-04 00:00:00 GMT+0800'), y: 19000 },
        { x: Date.parse('2022-12-11 00:00:00 GMT+0800'), y: 29000 },
    ];

    //Month
    const month = [
        { x: Date.parse('2022-06-01 00:00:00 GMT+0800'), y: 15000 }, //fixed Time format: HH:MM:SS (GMT: Greenwhich MeanTime)
        { x: Date.parse('2022-07-01 00:00:00 GMT+0800'), y: 9000 },
        { x: Date.parse('2022-08-01 00:00:00 GMT+0800'), y: 14000 },
        { x: Date.parse('2022-09-01 00:00:00 GMT+0800'), y: 16000 },
        { x: Date.parse('2022-10-01 00:00:00 GMT+0800'), y: 17000 },
        { x: Date.parse('2022-11-01 00:00:00 GMT+0800'), y: 19000 },
        { x: Date.parse('2022-12-01 00:00:00 GMT+0800'), y: 29000 },
    ];

    //Quarter
    const quarter = [
        { x: Date.parse('2022-01-01 00:00:00 GMT+0800'), y: 150000 }, //fixed Time format: HH:MM:SS (GMT: Greenwhich MeanTime)
        { x: Date.parse('2022-04-01 00:00:00 GMT+0800'), y: 90000 },
        { x: Date.parse('2022-08-01 00:00:00 GMT+0800'), y: 140000 },
        { x: Date.parse('2022-12-01 00:00:00 GMT+0800'), y: 160000 },
    ];

    //Yearly
    const year = [
        { x: Date.parse('2018-01-01 00:00:00 GMT+0800'), y: 180000 }, //fixed Time format: HH:MM:SS (GMT: Greenwhich MeanTime)
        { x: Date.parse('2019-01-01 00:00:00 GMT+0800'), y: 150000 },
        { x: Date.parse('2020-01-01 00:00:00 GMT+0800'), y: 130000 },
        { x: Date.parse('2021-01-01 00:00:00 GMT+0800'), y: 160000 },
        { x: Date.parse('2022-01-01 00:00:00 GMT+0800'), y: 190000 },
    ];

    // setup
    const data = {
        /* labels: ['Jan', 'Feb', 'March', 'April', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'],*/ //Get Columns from excel //now will be commented out
        /* data: [1800, 1201, 600, 900, 12  10, 3100, 9090, 1010,9010,1801,1210,10101,],*/ //Get data from excel // now will be commented out
        datasets: [{
            label: 'Weekly Sales',
            data: day, // from the const day //will be changed to user choice dropdown
            backgroundColor: [
                'rgb(79, 153, 0)', // legend color
                'rgb(79, 153, 0)',
                'rgba(255, 206, 86, 0.2)',
                'rgba(75, 192, 192, 0.2)',
                'rgba(153, 102, 255, 0.2)',
                'rgba(255, 159, 64, 0.2)',
                'rgba(0, 0, 0, 0.2)'
            ],
            borderColor: [
                'rgb(53, 102, 0)', // line color
                'rgba(54, 162, 235, 1)',
                'rgba(255, 206, 86, 1)',
                'rgba(75, 192, 192, 1)',
                'rgba(153, 102, 255, 1)',
                'rgba(255, 159, 64, 1)',
                'rgba(0, 0, 0, 1)',
                'rgba(153, 102, 255, 1)',
                'rgba(255, 159, 64, 1)',
                'rgba(0, 0, 0, 1)',
                'rgba(153, 102, 255, 0.2)',
                'rgba(255, 159, 64, 0.2)',
                'rgba(0, 0, 0, 0.2)'
            ],
            borderWidth: 0.5
        }]
    };

    // config
    const config = {
        type: 'line',
        data,
        options: {
            scales: {
                //add a new scale for time
                x: {
                    type: 'time',
                    time: {
                        unit: 'day' //therefore, data should be changed in the setup which is why dev should create a const that stores dates //will be changed to user choice dropdown
                    }
                },
                y: {
                    beginAtZero: true
                }
            }
        }
    };

    // render init block
    const myChart = new Chart(
        document.getElementById('myChart'),
        config
    );

    //Table Net Profit CHART ---------------------------------------------------------------------------------------------------------------------------------
    const profit = {
        labels: ['Net Profit'],
        datasets: [{
            label: 'Net Profit Current Month',
            data: ['The generated over all sales is Php:' + 1211],
            backgroundColor: [
                'orange', // legend color
            ],
            borderColor: [
                'orange', // line color
            ],
            borderWidth: 1
        },
        {
            label: 'Net Profit Last Month',
            data: ['The generated over all sales is Php:' + 121070],
            backgroundColor: [
                'gray', // legend color
            ],
            borderColor: [
                'gray', // line color
            ],
            borderWidth: 1
        },
        {
            label: 'Net Profit Current Year',
            data: ['The generated over all sales is Php:' + 18120],
            backgroundColor: [
                'rgb(0, 38, 153)', // legend color
            ],
            borderColor: [
                'rgb(0, 38, 153)', // line color
            ],
            borderWidth: 1
        },
        {
            label: 'Net Profit Last Year',
            data: ['The generated over all sales is Php:' + 18120],
            backgroundColor: [
                'rgb(0, 38, 153)', // legend color
            ],
            borderColor: [
                'rgb(0, 38, 153)', // line color
            ],
            borderWidth: 1
        }]
    };


    // config
    const config2 = {
        type: 'line',
        data: profit,
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    };
    const lineChart = new Chart(
        document.getElementById('lineChart'),
        config2
    );

    //function createTable() {
    //    console.log('triggered');
    //    const chartBox = document.querySelector('.chartBox2');
    //    const tableDiv = document.createElement('DIV');
    //    tableDiv.setAttribute('id', 'tableDiv');//assign ID

    //    //add Table
    //    const table = document.createElement('TABLE');
    //    table.classList.add('chartjs-table');

    //    //add thead
    //    const thead = table.createTHead();
    //    thead.classList.add('chartjs-thead');

    //    //add Column Headers using data
    //    thead.insertRow(0);
    //    console.log(units.labels)
    //    for (let i = 0; i < units.labels.length; i++) {
    //        thead.rows[0].insertCell(i).innerText = units.labels[i];
    //        thead.rows[0].cells[i].style.color = 'orange';
    //    };
    //    thead.rows[0].insertCell(0).innerText = 'Metrics';

    //    //tbody
    //    const tbody = table.createTBody();
    //    tbody.classList.add('chartjs-tbody');

    //    //data
    //    console.log(units.datasets)
    //    units.datasets.map((dataset, index) => {
    //        tbody.insertRow(index);
    //        for (let i = 0; i < units.datasets[0].data.length; i++) {
    //            tbody.rows[index].insertCell(i).innerText = dataset.data[i];
    //        };

    //        tbody.rows[index].insertCell(0).innerText = dataset.label;
    //    })
    //    //append
    //    chartBox.appendChild(tableDiv);
    //    tableDiv.appendChild(table);
    //};

    //createTable();


    //function for change to timeline
    function timeFrame(period) {
        console.log(period.value);
        if (period.value == 'day') {
            myChart.config.options.scales.x.time.unit = period.value; //value
            myChart.config.data.datasets[0].data = day; //x Axis legend
        }
        if (period.value == 'week') {
            myChart.config.options.scales.x.time.unit = period.value;
            myChart.config.data.datasets[0].data = week;
        }
        if (period.value == 'month') {
            myChart.config.options.scales.x.time.unit = period.value;
            myChart.config.data.datasets[0].data = month;
        }
        if (period.value == 'quarter') {
            myChart.config.options.scales.x.time.unit = period.value;
            myChart.config.data.datasets[0].data = quarter;
        }
        if (period.value == 'year') {
            myChart.config.options.scales.x.time.unit = period.value;
            myChart.config.data.datasets[0].data = year;
        }

        myChart.update();
    }



</script>
